{"version":3,"sources":["components/ReminderForm.js","components/AllReminders.js","App.js","reducers/index.js","index.js"],"names":["connect","dispatch","addReminder","reminder","type","payload","clearAll","props","useState","setReminder","changeHandel","e","newReminder","target","name","value","id","onChange","htmlFor","text","required","date","min","onClick","preventDefault","Object","keys","length","state","reminders","deleteReminder","i","remindersList","map","key","Math","random","deleteHandel","initialState","rootReducer","action","newReminders","console","log","splice","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","toRoot","document","getElementById","ReactDOM","render"],"mappings":"2PAyEeA,G,MAAAA,YAAQ,MAVI,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,EAAS,CAAEG,KAAM,eAAgBC,QAASF,KAG9CG,SAAU,kBAAML,EAAS,CAAEG,KAAM,cAI1BJ,EArEM,SAACO,GAClB,IAD4B,EAEIC,mBADZ,IADQ,mBAErBL,EAFqB,KAEXM,EAFW,KAItBC,EAAe,SAACC,GAClB,IAAIC,EAAW,eAAQT,EAAR,eAAmBQ,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,QAC3DN,EAAYG,IAgBhB,OACI,yBAAKI,GAAG,sBACJ,0BAAMA,GAAG,gBAAgBC,SAAUP,GAC/B,6BACI,2BAAOQ,QAAQ,QAAf,QACA,2BACID,SAAUP,EACVN,KAAK,OACLY,GAAG,OACHF,KAAK,OACLC,MAAOZ,EAASgB,MAAQ,GACxBC,UAAQ,KAGhB,6BACI,2BAAOF,QAAQ,QAAf,cACA,2BACID,SAAUP,EACVN,KAAK,OACLY,GAAG,OACHF,KAAK,OACLC,MAAOZ,EAASkB,MAAQ,GACxBC,IAAI,aACJF,UAAQ,KAGhB,6BACI,4BAAQhB,KAAK,SAASmB,QAxCZ,SAACZ,GACvBA,EAAEa,iBACEC,OAAOC,KAAKvB,GAAUwB,SACtBpB,EAAML,YAAYC,GAClBM,EAAY,OAoCJ,OAGA,4BAAQc,QAnCJ,SAACZ,GACjBA,EAAEa,iBACFf,EAAY,IACZF,EAAMD,aAgCM,oBC7BLN,G,MAAAA,aAPS,SAAC4B,GACrB,MAAO,CAAEC,UAAWD,EAAMC,cAGH,SAAC5B,GACxB,MAAO,CAAE6B,eAAgB,SAACC,GAAD,OAAO9B,EAAS,CAACG,KAAM,kBAAmBC,QAAS0B,QAEjE/B,EAvBM,SAACO,GAElB,IAGMyB,EAAgBzB,EAAMsB,UAAUI,KAAI,SAAC9B,EAAU4B,GACjD,OACI,wBAAIG,IAAKC,KAAKC,UACTjC,EAASgB,KADd,KACsBhB,EAASkB,KAC3B,4BAAQE,QAAS,kBAPR,SAACQ,GAClBxB,EAAMuB,eAAeC,GAMQM,CAAaN,KAAlC,SAIZ,OAAO,wBAAIf,GAAG,iBAAiBgB,OCIpBhC,cAAQ,KAARA,EAhBH,SAACO,GAET,OACE,6BACE,wBAAIS,GAAG,QAAP,iBAEA,6BACE,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,W,eCfNsB,EAAe,CACfT,UAAW,CACP,CAAEV,KAAM,QAASE,KAAM,cACvB,CAAEF,KAAM,SAAUE,KAAM,gBAqBjBkB,EAjBK,WAAmC,IAAlCX,EAAiC,uDAAzBU,EAAcE,EAAW,uCAC9CC,EAAY,YAAOb,EAAMC,WAC7B,OAAQW,EAAOpC,MACX,IAAK,eAED,OADAqC,EAAY,sBAAOb,EAAMC,WAAb,CAAwBW,EAAOnC,UACpC,eAAKuB,EAAZ,CAAmBC,UAAWY,IAClC,IAAK,kBAGD,OAFJC,QAAQC,IAAIH,EAAOnC,SACfoC,EAAaG,OAAOJ,EAAOnC,QAAS,GAC7B,eAAKuB,EAAZ,CAAmBC,UAAWY,IAClC,IAAK,QACD,OAAO,eAAKb,EAAZ,CAAmBC,UAAW,KAClC,QACI,OAAOD,ICZbiB,EAAQC,YACZP,EACAQ,OAAOC,8BAAgCD,OAAOC,gCAI1CC,EAASC,SAASC,eAAe,QAEvCC,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,EAAD,OAEFI,K","file":"static/js/main.29c59d9c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./ReminderForm.scss\";\n\nconst ReminderForm = (props) => {\n    const iniReminder = {};\n    const [reminder, setReminder] = useState(iniReminder);\n\n    const changeHandel = (e) => {\n        let newReminder = { ...reminder, [e.target.name]: e.target.value };\n        setReminder(newReminder);\n    };\n\n    const newReminderHandel = (e) => {\n        e.preventDefault();\n        if (Object.keys(reminder).length) {\n            props.addReminder(reminder);\n            setReminder({});\n        }\n    };\n\n    const clearHandel = (e) => {\n        e.preventDefault();\n        setReminder({});\n        props.clearAll();\n    };\n    return (\n        <div id=\"Reminder-Component\">\n            <form id=\"reminder-form\" onChange={changeHandel}>\n                <div>\n                    <label htmlFor=\"text\">Text</label>\n                    <input\n                        onChange={changeHandel}\n                        type=\"text\"\n                        id=\"text\"\n                        name=\"text\"\n                        value={reminder.text || \"\"}\n                        required\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"date\">Start Date</label>\n                    <input\n                        onChange={changeHandel}\n                        type=\"date\"\n                        id=\"date\"\n                        name=\"date\"\n                        value={reminder.date || \"\"}\n                        min=\"2020-07-01\"\n                        required\n                    />\n                </div>\n                <div>\n                    <button type=\"submit\" onClick={newReminderHandel}>\n                        Add\n                    </button>\n                    <button onClick={clearHandel}>Clear All</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addReminder: (reminder) => {\n            dispatch({ type: \"add Reminder\", payload: reminder });\n        },\n\n        clearAll: () => dispatch({ type: \"clear\" }),\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(ReminderForm);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./AllReminders.scss\"\n\nconst AllReminders = (props) => {\n\n    const deleteHandel = (i) => {\n        props.deleteReminder(i)\n    }\n    const remindersList = props.reminders.map((reminder, i) => {\n        return (\n            <li key={Math.random()}  >\n                {reminder.text}, {reminder.date}\n                <button onClick={()=>deleteHandel(i)}>X</button>\n            </li>\n        );\n    });\n    return <ul id=\"all-reminders\">{remindersList}</ul>;\n};\n\nconst mapStateToProps = (state) => {\n    return { reminders: state.reminders };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return { deleteReminder: (i) => dispatch({type: 'delete Reminder', payload: i}) };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AllReminders);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ReminderForm from \"./components/ReminderForm\";\nimport AllReminders from \"./components/AllReminders\";\n\nconst App = (props) => {\n\n    return (\n      <div>\n        <h1 id=\"logo\"> Reminder App</h1>\n       \n        <div>\n          <ReminderForm/>\n        </div>\n        <div>\n          <AllReminders />\n        </div>\n      </div>\n    );\n}\n\nexport default connect(null)(App);","let initialState = {\n    reminders: [\n        { text: \"hello\", date: \"2020-07-10\" },\n        { text: \"hello2\", date: \"2021-04-20\" }\n    ],\n};\n\nconst rootReducer = (state = initialState, action) => {\n    let newReminders = [...state.reminders];\n    switch (action.type) {\n        case \"add Reminder\":\n            newReminders = [...state.reminders, action.payload];\n            return { ...state, reminders: newReminders };\n        case \"delete Reminder\":\n        console.log(action.payload)\n            newReminders.splice(action.payload, 1)\n            return { ...state, reminders: newReminders };\n        case \"clear\":\n            return { ...state, reminders: [] };\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { createStore } from \"redux\";\nimport { Provider } from 'react-redux'\n\nimport rootReducer from './reducers'\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n\nconst toRoot = document.getElementById('root')\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  toRoot\n);"],"sourceRoot":""}